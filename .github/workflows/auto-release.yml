name: Auto Release

on:
  pull_request:
    types: [closed]
    branches:
      - main
      - master

jobs:
  create-release:
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/')
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ env.TAG_NAME }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ env.VERSION }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from branch name
        id: extract_version
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#release/}
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "TAG_NAME=v${VERSION}" >> $GITHUB_ENV

      - name: Create Release Tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag -a ${{ env.TAG_NAME }} -m "Release ${{ env.TAG_NAME }}"
          git push origin ${{ env.TAG_NAME }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: ${{ env.TAG_NAME }}
          draft: false
          prerelease: false
          body: |
            Release ${{ env.TAG_NAME }}

            release branch `${{ github.event.pull_request.head.ref }}`
            merged PR: #${{ github.event.pull_request.number }}

  # リリースビルドジョブを直接実行
  build-release:
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: codicat-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            asset_name: codicat-linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: codicat-darwin-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name: codicat-darwin-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: codicat-windows-amd64.exe

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-release.outputs.tag_name }}

      # Rust toolchain setup
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      # Install cross-compilation tools
      - name: Install cross-compilation tools
        if: contains(matrix.target, 'aarch64') && contains(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      # Build
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
          use-cross: ${{ contains(matrix.target, 'aarch64') && contains(matrix.os, 'ubuntu') }}

      # Copy binary (Unix)
      - name: Rename binary (Unix)
        if: runner.os != 'Windows'
        run: |
          cp target/${{ matrix.target }}/release/codicat ${{ matrix.asset_name }}
          chmod +x ${{ matrix.asset_name }}

      # Rename binary (Windows)
      - name: Rename binary (Windows)
        if: runner.os == 'Windows'
        run: |
          copy target\${{ matrix.target }}\release\codicat.exe ${{ matrix.asset_name }}

      # Create tar.gz archive for Homebrew (Unix only)
      - name: Create tar.gz archive for Homebrew
        if: runner.os != 'Windows'
        id: create_archive
        run: |
          # リリースタグから'v'を削除
          VERSION="${{ needs.create-release.outputs.tag_name }}"
          VERSION="${VERSION#v}" # Remove 'v' prefix if present
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          OS="${{ matrix.os == 'macos-latest' && 'darwin' || 'linux' }}"
          ARCH="${{ contains(matrix.target, 'aarch64') && 'arm64' || 'amd64' }}"
          echo "OS=${OS}" >> $GITHUB_ENV
          echo "ARCH=${ARCH}" >> $GITHUB_ENV

          mkdir -p codicat-${VERSION}-${OS}-${ARCH}
          cp ${{ matrix.asset_name }} codicat-${VERSION}-${OS}-${ARCH}/codicat
          tar -czf codicat-${VERSION}-${OS}-${ARCH}.tar.gz -C codicat-${VERSION}-${OS}-${ARCH} codicat

      # Upload tar.gz archive for Homebrew (Unix only)
      - name: Upload tar.gz archive for Homebrew
        if: runner.os != 'Windows'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./codicat-${{ env.VERSION }}-${{ env.OS }}-${{ env.ARCH }}.tar.gz
          asset_name: codicat-${{ env.VERSION }}-${{ env.OS }}-${{ env.ARCH }}.tar.gz
          asset_content_type: application/gzip

      # Upload release asset
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream

  homebrew-releaser:
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    name: Release to Homebrew
    steps:
      - name: Release project to Homebrew tap
        uses: Justintime50/homebrew-releaser@v2.0.1
        with:
          # Homebrewタップの設定
          homebrew_owner: inakam
          homebrew_tap: homebrew-tap

          # フォーミュラの保存先フォルダ
          formula_folder: Formula

          # GitHubトークン
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

          # インストールコマンド（バイナリの配置方法を指定）
          install: 'bin.install "codicat"'

          # ターゲットOS/アーキテクチャの指定（Windows以外）
          target_darwin_amd64: true
          target_darwin_arm64: true
          target_linux_amd64: true
          target_linux_arm64: true

          # デバッグモード
          debug: true
