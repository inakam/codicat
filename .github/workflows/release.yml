name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: リリース作成
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

  build-release:
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: codicat-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            asset_name: codicat-linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: codicat-darwin-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name: codicat-darwin-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: codicat-windows-amd64.exe

    steps:
      - uses: actions/checkout@v4

      # Rustツールチェインセットアップ
      - name: Rustツールチェインインストール
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      # クロスコンパイル用のツール
      - name: クロスコンパイル用ツールのインストール
        if: contains(matrix.target, 'aarch64') && contains(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      # ビルド
      - name: ビルド
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
          use-cross: ${{ contains(matrix.target, 'aarch64') && contains(matrix.os, 'ubuntu') }}

      # 必要に応じたバイナリのコピー
      - name: バイナリのリネーム (Unix)
        if: runner.os != 'Windows'
        run: |
          cp target/${{ matrix.target }}/release/codicat ${{ matrix.asset_name }}
          chmod +x ${{ matrix.asset_name }}

      - name: バイナリのリネーム (Windows)
        if: runner.os == 'Windows'
        run: |
          copy target\${{ matrix.target }}\release\codicat.exe ${{ matrix.asset_name }}

      # リリースのアップロード
      - name: リリースアップロード
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream
