use anyhow::Result;
use std::fs::File;
use std::io::{self, BufRead, BufReader};
use std::path::{Path, PathBuf};

/// 自動生成ファイル検出用の定数
const HEADER_CHECK_LINES: usize = 10;
const HEADER_KEYWORDS: [&str; 4] = [
    "generated by",
    "do not edit",
    "automatically generated",
    "auto-generated",
];

/// 自動生成ファイルをフィルタリングする
pub fn filter_generated_files(files: Vec<PathBuf>) -> Result<Vec<PathBuf>> {
    let filtered = files
        .into_iter()
        .filter(|f| match is_auto_generated(f) {
            Ok(is_generated) => !is_generated,
            Err(_) => true, // エラーの場合はファイルを含める
        })
        .collect();

    Ok(filtered)
}

/// ファイルが自動生成されたものかを判断する
pub fn is_auto_generated(path: &Path) -> io::Result<bool> {
    if let Ok(file) = File::open(path) {
        let reader = BufReader::new(file);
        for line_result in reader.lines().take(HEADER_CHECK_LINES) {
            if let Ok(line) = line_result {
                let lower_line = line.to_lowercase();
                for keyword in HEADER_KEYWORDS.iter() {
                    if lower_line.contains(keyword) {
                        return Ok(true);
                    }
                }
            }
        }
    }
    Ok(false)
}
